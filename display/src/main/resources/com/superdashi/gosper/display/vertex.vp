// GLSL 130+ uses in and out instead of attribute and varying used by OpenGL 3 core and later.
#if __VERSION__ >= 130
  #define attribute in
  #define varying out
#endif

// Precision Qualifiers GLSL ES section 4.5.2
#ifdef GL_ES
precision mediump float;
precision mediump int;
#endif

const vec4 zero4        = vec4(0.0, 0.0, 0.0, 0.0);

uniform mat4    u_projection[4];
uniform mat4    u_animation[MAX_ANIMS]; // define inserted by ModeShaders class
uniform mat4    u_color[MAX_ANIMS];

attribute vec3  a_position;
attribute vec3  a_normal;
attribute vec2  a_color_rg;
attribute vec2  a_color_ba;
attribute vec2  a_tx_coord;
attribute float a_animation;
attribute vec3  a_handle;
attribute vec4  a_shader;

  varying vec3  v_position;
  varying vec3  v_normal;
  varying vec4  v_color;
  varying vec2  v_tx_coord;
  varying vec4  v_shader;

vec3 rgb2hsv(vec3 c) {
  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
  vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
  vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

  float d = q.x - min(q.w, q.y);
  float e = 1.0e-10;
  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c) {
  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float pull(float c, float d) {
	float p = abs(d - 0.5) * 2.0;
	return mix(c, d, p);
}

void adjustColor(inout vec4 result, in vec4 shift, in vec4 color) {
  if (shift.a > 0.0) {
      vec3 hsv = rgb2hsv(result.rgb);
      hsv.r = fract(hsv.r + shift.r);
      hsv.g = pull(hsv.g, shift.g);
      hsv.b = pull(hsv.b, shift.b);
      result.rgb = hsv2rgb(hsv);
    }
    result.rgb = mix(result.rgb, color.rgb, color.a);
}

void main(void) {
  v_color.rg = a_color_rg.xy;
  v_color.ba = a_color_ba.xy;

  vec4 world_pos;
  vec4 bg_color;
  if (a_animation >= 0.0) {
    int anim_id = int(a_animation);
    mat4 anim_mat = u_animation[anim_id];
    world_pos = vec4(a_handle, 0.0) + anim_mat * vec4(a_position - a_handle, 1.0);
    v_normal = mat3(u_projection[3]) * mat3(anim_mat) * a_normal;
    mat4 color = u_color[anim_id];
    adjustColor(v_color, color[1], color[0]);
    /* TODO can we pass alternative color using anim? */
    //adjustColor(v_fg_color, color[3], color[2]);
  } else {
    world_pos = vec4(a_position, 1.0);
    v_normal = mat3(u_projection[3]) * a_normal;
  }
  vec4 eyeCoord = u_projection[1] * world_pos;
  gl_Position = u_projection[0] * eyeCoord;
  
  v_position = eyeCoord.xyz;
  v_tx_coord = a_tx_coord;
  v_shader = a_shader;
}
